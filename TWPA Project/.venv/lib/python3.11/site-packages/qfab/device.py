import gdsfactory as gf
import gdstk
import numpy as np
from gdsfactory.components import rectangle

from qfab.components import border, id_box, probe_alignment
from qfab.utils import remove_layers


def standard_device_layout(
    chip: gf.Component,
    chip_size: tuple[float, float] = (10_000, 10_000),
    align_location: tuple[float, float] = (400, -175),
    id_location: tuple[float, float] = (100, -300),
    rotation: float = 0,
) -> gf.Component:
    b = border(size=chip_size)
    chip << b

    ref_corner = (-1, 1) * np.array(chip_size) / 2

    align = chip << probe_alignment()
    align.move(ref_corner + align_location)
    align.rotate(rotation)

    box = id_box()
    box_ref = chip << box
    box_ref.move(ref_corner + id_location)
    box_ref.rotate(rotation)
    return chip


def subtract_cutouts(chip: gf.Component) -> gf.Component:
    """Subtract metal layers from etched substrate regions.

    Args:
        chip: The top level component.

    Returns:
        The same chip component that has been modified.
    """
    SC1_E = gdstk.boolean(chip.extract(layers=["SC1_E"]).polygons, [], "or")
    SC1 = gdstk.boolean(chip.extract(layers=["SC1"]).polygons, [], "or")

    new_SC1_E = gdstk.boolean(SC1_E, SC1, "not")

    SC2_E = gdstk.boolean(chip.extract(layers=["SC2_E"]).polygons, [], "or")
    SC2 = gdstk.boolean(chip.extract(layers=["SC2"]).polygons, [], "or")

    new_SC2_E = gdstk.boolean(SC2_E, SC2, "not")

    remove_layers(chip, layers=["SC1_E"])
    remove_layers(chip, layers=["SC2_E"])

    chip.add_polygon(new_SC1_E, layer="SC1_E")
    chip.add_polygon(new_SC2_E, layer="SC1_E")

    return chip


def positive_mask(chip: gf.Component, size: tuple[float, float]) -> gf.Component:
    lx, ly = size
    ground = gdstk.rectangle((-lx / 2, -ly / 2), (lx / 2, ly / 2))

    SC1_E = gdstk.boolean(chip.extract(layers=["SC1_E"]).polygons, [], "or")

    ground = gdstk.boolean(ground, SC1_E, "not")

    # remove_layers(chip, layers=["SC1_E"])
    # remove_layers(chip, layers=["SC2_E"])

    chip.add_polygon(ground, layer="SC1")
    # chip.add_polygon(new_SC2_E, layer="SC1_E")

    return chip


def flux_trap_layout(
    chip: gf.Component,
    x_grid: int,
    y_grid: int,
    size: tuple[float, float] = (5, 5),
    offset: float = 30,
):
    cutouts = chip.extract(layers=["SC1", "SC1_E", "KEEPOUT"])
    polys = gdstk.boolean(cutouts.polygons, [], "or")
    mask = gdstk.offset(polys, distance=offset, precision=1e-2)

    lx, ly = np.diff(chip.bbox, axis=0).squeeze().astype(int)

    xs = np.r_[:lx:x_grid]
    ys = np.r_[:ly:y_grid]

    xs = xs - (xs[-1] - xs[0]) / 2
    ys = ys - (ys[-1] - ys[0]) / 2

    points = np.stack(np.meshgrid(xs, ys)).transpose(1, 2, 0)
    points = points.reshape(-1, 2)

    pt_mask = np.array(gdstk.inside(points, mask))

    locations = points[~pt_mask, :]

    flux_hole = rectangle(size, centered=True, layer="SC1_V")

    ref = flux_hole._cell.references[0]
    ref.cell.name = "flux_trap"
    ref.repetition = gdstk.Repetition(offsets=locations)
    chip.add(ref)

    return chip
